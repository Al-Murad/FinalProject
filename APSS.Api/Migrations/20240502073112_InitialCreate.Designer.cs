// <auto-generated />
using System;
using APSS.Lib.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APSS.Api.Migrations
{
    [DbContext(typeof(AutoPartsDbContext))]
    [Migration("20240502073112_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APSS.Lib.Models.CommonDetail", b =>
                {
                    b.Property<int>("CommonDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommonDetailId"));

                    b.Property<string>("DetailName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CommonDetailId");

                    b.ToTable("CommonDetails");
                });

            modelBuilder.Entity("APSS.Lib.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("APSS.Lib.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<string>("InventoryCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("RetailPrice")
                        .HasColumnType("money");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("InventoryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("APSS.Lib.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("date");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("APSS.Lib.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("APSS.Lib.Models.Part", b =>
                {
                    b.Property<int>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartId"));

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("ServiceDetailEntryId")
                        .HasColumnType("int");

                    b.HasKey("PartId");

                    b.HasIndex("ServiceDetailEntryId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("APSS.Lib.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("APSS.Lib.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryId"));

                    b.Property<string>("ProductCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("APSS.Lib.Models.ProductDetail", b =>
                {
                    b.Property<int>("ProductDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductDetailId"));

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductDetailId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("APSS.Lib.Models.ProductPicture", b =>
                {
                    b.Property<int>("ProductPictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductPictureId"));

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductPictureId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPictures");
                });

            modelBuilder.Entity("APSS.Lib.Models.ServiceDetail", b =>
                {
                    b.Property<int>("ServiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceDetailId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ProposedServiceDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("date");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int");

                    b.HasKey("ServiceDetailId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("ServiceDetails");
                });

            modelBuilder.Entity("APSS.Lib.Models.ServiceDetailEntry", b =>
                {
                    b.Property<int>("ServiceDetailEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceDetailEntryId"));

                    b.Property<decimal>("ServiceCost")
                        .HasColumnType("money");

                    b.Property<int>("ServiceDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceStatusId")
                        .HasColumnType("int");

                    b.HasKey("ServiceDetailEntryId");

                    b.HasIndex("ServiceDetailId");

                    b.HasIndex("ServiceRequestId");

                    b.HasIndex("ServiceStatusId");

                    b.ToTable("ServiceDetailEntries");
                });

            modelBuilder.Entity("APSS.Lib.Models.ServicePayment", b =>
                {
                    b.Property<int>("ServicePaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicePaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<string>("PaymentThrough")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ServiceDetailEntryId")
                        .HasColumnType("int");

                    b.HasKey("ServicePaymentId");

                    b.HasIndex("ServiceDetailEntryId");

                    b.ToTable("ServicePayments");
                });

            modelBuilder.Entity("APSS.Lib.Models.ServiceRequest", b =>
                {
                    b.Property<int>("ServiceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceRequestId"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("ServiceRequestId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("APSS.Lib.Models.ServiceStatus", b =>
                {
                    b.Property<int>("ServiceStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceStatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ServiceStatusId");

                    b.ToTable("ServiceStatus");
                });

            modelBuilder.Entity("APSS.Lib.Models.ServiceType", b =>
                {
                    b.Property<int>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceTypeId"));

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("ServiceTypeId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("APSS.Lib.Models.StockEntry", b =>
                {
                    b.Property<int>("StockEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockEntryId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TotalIn")
                        .HasColumnType("int");

                    b.Property<int>("TotalSold")
                        .HasColumnType("int");

                    b.HasKey("StockEntryId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("StockEntries");
                });

            modelBuilder.Entity("APSS.Lib.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("APSS.Lib.Models.VehicleType", b =>
                {
                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleTypeId"));

                    b.Property<string>("VehicleTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VehicleTypeId");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("APSS.Lib.Models.Inventory", b =>
                {
                    b.HasOne("APSS.Lib.Models.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APSS.Lib.Models.Supplier", "Supplier")
                        .WithMany("Inventories")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("APSS.Lib.Models.Order", b =>
                {
                    b.HasOne("APSS.Lib.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("APSS.Lib.Models.OrderDetail", b =>
                {
                    b.HasOne("APSS.Lib.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APSS.Lib.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APSS.Lib.Models.Part", b =>
                {
                    b.HasOne("APSS.Lib.Models.ServiceDetailEntry", "ServiceDetailEntry")
                        .WithMany("Parts")
                        .HasForeignKey("ServiceDetailEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceDetailEntry");
                });

            modelBuilder.Entity("APSS.Lib.Models.Product", b =>
                {
                    b.HasOne("APSS.Lib.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("APSS.Lib.Models.ProductCategory", b =>
                {
                    b.HasOne("APSS.Lib.Models.VehicleType", "VehicleType")
                        .WithMany("ProductCategories")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("APSS.Lib.Models.ProductDetail", b =>
                {
                    b.HasOne("APSS.Lib.Models.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APSS.Lib.Models.ProductPicture", b =>
                {
                    b.HasOne("APSS.Lib.Models.Product", "Product")
                        .WithMany("ProductPictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APSS.Lib.Models.ServiceDetail", b =>
                {
                    b.HasOne("APSS.Lib.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("ServiceDetails")
                        .HasForeignKey("ServiceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("APSS.Lib.Models.ServiceDetailEntry", b =>
                {
                    b.HasOne("APSS.Lib.Models.ServiceDetail", "ServiceDetail")
                        .WithMany("ServiceDetailEntries")
                        .HasForeignKey("ServiceDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APSS.Lib.Models.ServiceRequest", null)
                        .WithMany("ServiceDetailEntries")
                        .HasForeignKey("ServiceRequestId");

                    b.HasOne("APSS.Lib.Models.ServiceStatus", "ServiceStatus")
                        .WithMany("ServiceDetailEntries")
                        .HasForeignKey("ServiceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceDetail");

                    b.Navigation("ServiceStatus");
                });

            modelBuilder.Entity("APSS.Lib.Models.ServicePayment", b =>
                {
                    b.HasOne("APSS.Lib.Models.ServiceDetailEntry", "ServiceDetailEntry")
                        .WithMany("ServicePayments")
                        .HasForeignKey("ServiceDetailEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceDetailEntry");
                });

            modelBuilder.Entity("APSS.Lib.Models.ServiceRequest", b =>
                {
                    b.HasOne("APSS.Lib.Models.ServiceType", "ServiceType")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("APSS.Lib.Models.ServiceType", b =>
                {
                    b.HasOne("APSS.Lib.Models.VehicleType", "VehicleType")
                        .WithMany("ServiceTypes")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("APSS.Lib.Models.StockEntry", b =>
                {
                    b.HasOne("APSS.Lib.Models.Product", "Product")
                        .WithOne("StockEntry")
                        .HasForeignKey("APSS.Lib.Models.StockEntry", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APSS.Lib.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("APSS.Lib.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("APSS.Lib.Models.Product", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("ProductDetails");

                    b.Navigation("ProductPictures");

                    b.Navigation("StockEntry");
                });

            modelBuilder.Entity("APSS.Lib.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("APSS.Lib.Models.ServiceDetail", b =>
                {
                    b.Navigation("ServiceDetailEntries");
                });

            modelBuilder.Entity("APSS.Lib.Models.ServiceDetailEntry", b =>
                {
                    b.Navigation("Parts");

                    b.Navigation("ServicePayments");
                });

            modelBuilder.Entity("APSS.Lib.Models.ServiceRequest", b =>
                {
                    b.Navigation("ServiceDetailEntries");

                    b.Navigation("ServiceDetails");
                });

            modelBuilder.Entity("APSS.Lib.Models.ServiceStatus", b =>
                {
                    b.Navigation("ServiceDetailEntries");
                });

            modelBuilder.Entity("APSS.Lib.Models.ServiceType", b =>
                {
                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("APSS.Lib.Models.Supplier", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("APSS.Lib.Models.VehicleType", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("ServiceTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
